
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "control.h"

void Control_sendControl(int control, int value){
   Serial_write(176);
   Serial_write(control);
   Serial_write(value);
}

void Control__ctx_type_7_init(Control__ctx_type_7 &_output_){
   Control__ctx_type_7 _ctx;
   _ctx.target_right = 0x0 /* 0.000000 */;
   _ctx.target_left = 0x0 /* 0.000000 */;
   _ctx.state = 0;
   _ctx.control = 0;
   _output_ = _ctx;
   return ;
}

void Control_processMessages_init(Control__ctx_type_7 &_output_){
   Control__ctx_type_7_init(_output_);
   return ;
}

void Control_processMessages(Control__ctx_type_7 &_ctx, _tuple___real_real__ &_output_){
   while(Serial_available() > 0){
      int inByte;
      inByte = Serial_read();
      uint8_t _cond_47;
      _cond_47 = ((_ctx.state == 0) && (inByte == 176));
      if(_cond_47){
         _ctx.state = 1;
      }
      else
      {
         uint8_t _cond_46;
         _cond_46 = (_ctx.state == 1);
         if(_cond_46){
            _ctx.control = inByte;
            _ctx.state = 2;
         }
         else
         {
            uint8_t _cond_45;
            _cond_45 = (_ctx.state == 2);
            if(_cond_45){
               _ctx.state = 0;
               uint8_t _cond_43;
               _cond_43 = (_ctx.control == 80);
               if(_cond_43){
                  _ctx.target_left = int_to_fix((inByte + (-64)));
               }
               uint8_t _cond_44;
               _cond_44 = (_ctx.control == 81);
               if(_cond_44){
                  _ctx.target_right = int_to_fix((inByte + (-64)));
               }
            }
            else
            {
               _ctx.state = 0;
            }
         }
      }
   }
   _tuple___real_real__ _tuple_48;
   {
      _tuple_48.field_0 = _ctx.target_left;
      _tuple_48.field_1 = _ctx.target_right;
   }
   _output_ = _tuple_48;
   return ;
}

void Control_moveMotor(int id, fix16_t value){
   int vel;
   vel = fix_to_int(fix_abs(value));
   uint8_t _cond_53;
   _cond_53 = (id == 1);
   if(_cond_53){
      uint8_t dir;
      dir = (value >= 0x0 /* 0.000000 */);
      IO_digitalWrite(5,dir);
      IO_analogWrite(4,vel);
   }
   else
   {
      uint8_t _cond_52;
      _cond_52 = (id == 2);
      if(_cond_52){
         uint8_t dir;
         dir = (value >= 0x0 /* 0.000000 */);
         IO_digitalWrite(7,dir);
         IO_analogWrite(6,vel);
      }
      else
      {
         uint8_t _cond_51;
         _cond_51 = (id == 3);
         if(_cond_51){
            uint8_t dir;
            dir = (value <= 0x0 /* 0.000000 */);
            IO_digitalWrite(9,dir);
            IO_analogWrite(8,vel);
         }
         else
         {
            uint8_t _cond_50;
            _cond_50 = (id == 4);
            if(_cond_50){
               uint8_t dir;
               dir = (value <= 0x0 /* 0.000000 */);
               IO_digitalWrite(11,dir);
               IO_analogWrite(10,vel);
            }
         }
      }
   }
}

void Control__ctx_type_9_init(Control__ctx_type_9 &_output_){
   Control__ctx_type_9 _ctx;
   _ctx.state = 0;
   _ctx.pos = 0;
   _ctx.init = 0;
   _output_ = _ctx;
   return ;
}

void Control_processEncoder_init(Control__ctx_type_9 &_output_){
   Control__ctx_type_9_init(_output_);
   return ;
}

void Control_processEncoder(Control__ctx_type_9 &_ctx, int pin1, int pin2){
   int enc1;
   uint8_t _cond_62;
   _cond_62 = IO_digitalRead(pin1);
   if(_cond_62){ enc1 = 2; }
   else
   { enc1 = 0; }
   int enc2;
   uint8_t _cond_63;
   _cond_63 = IO_digitalRead(pin2);
   if(_cond_63){ enc2 = 1; }
   else
   { enc2 = 0; }
   int new_state;
   new_state = (enc1 + enc2);
   if(_ctx.init){
      uint8_t _cond_54;
      _cond_54 = ((_ctx.state == 0) && (new_state == 1));
      if(_cond_54){
         _ctx.pos = (_ctx.pos + (-1));
      }
      uint8_t _cond_55;
      _cond_55 = ((_ctx.state == 0) && (new_state == 2));
      if(_cond_55){
         _ctx.pos = (_ctx.pos + 1);
      }
      uint8_t _cond_56;
      _cond_56 = ((_ctx.state == 1) && (new_state == 3));
      if(_cond_56){
         _ctx.pos = (_ctx.pos + (-1));
      }
      uint8_t _cond_57;
      _cond_57 = ((_ctx.state == 1) && (new_state == 0));
      if(_cond_57){
         _ctx.pos = (_ctx.pos + 1);
      }
      uint8_t _cond_58;
      _cond_58 = ((_ctx.state == 2) && (new_state == 0));
      if(_cond_58){
         _ctx.pos = (_ctx.pos + (-1));
      }
      uint8_t _cond_59;
      _cond_59 = ((_ctx.state == 2) && (new_state == 3));
      if(_cond_59){
         _ctx.pos = (_ctx.pos + 1);
      }
      uint8_t _cond_60;
      _cond_60 = ((_ctx.state == 3) && (new_state == 2));
      if(_cond_60){
         _ctx.pos = (_ctx.pos + (-1));
      }
      uint8_t _cond_61;
      _cond_61 = ((_ctx.state == 3) && (new_state == 1));
      if(_cond_61){
         _ctx.pos = (_ctx.pos + 1);
      }
   }
   else
   {
      _ctx.init = 1;
   }
   _ctx.state = new_state;
}

void Control_getDisplacement_init(Control__ctx_type_9 &_output_){
   Control__ctx_type_9_init(_output_);
   return ;
}

fix16_t Control_getDisplacement(Control__ctx_type_9 &_ctx){
   int ret;
   ret = _ctx.pos;
   _ctx.pos = 0;
   return int_to_fix(ret);
}

void Control__ctx_type_10_init(Control__ctx_type_10 &_output_){
   Control__ctx_type_10 _ctx;
   _ctx.i = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Control_control_init(Control__ctx_type_10 &_output_){
   Control__ctx_type_10_init(_output_);
   return ;
}

fix16_t Control_control(Control__ctx_type_10 &_ctx, fix16_t target, fix16_t current){
   fix16_t ki;
   ki = 0x0 /* 0.000000 */;
   fix16_t kp;
   kp = 0x10000 /* 1.000000 */;
   fix16_t error;
   error = (target + (- current));
   _ctx.i = (_ctx.i + fix_mul(ki,error));
   return (fix_mul(kp,error) + _ctx.i);
}

void Control__ctx_type_11_init(Control__ctx_type_11 &_output_){
   Control__ctx_type_11 _ctx;
   _ctx.target_right = 0x0 /* 0.000000 */;
   _ctx.target_left = 0x0 /* 0.000000 */;
   _ctx.speed4 = 0x0 /* 0.000000 */;
   _ctx.speed3 = 0x0 /* 0.000000 */;
   _ctx.speed2 = 0x0 /* 0.000000 */;
   _ctx.speed1 = 0x0 /* 0.000000 */;
   Control__ctx_type_9_init(_ctx.enc4);
   Control__ctx_type_9_init(_ctx.enc3);
   Control__ctx_type_9_init(_ctx.enc2);
   Control__ctx_type_9_init(_ctx.enc1);
   Control__ctx_type_10_init(_ctx._inst38);
   Control__ctx_type_10_init(_ctx._inst37);
   Control__ctx_type_10_init(_ctx._inst36);
   Control__ctx_type_10_init(_ctx._inst35);
   Control__ctx_type_7_init(_ctx._inst33);
   _output_ = _ctx;
   return ;
}

void Control_loop_init(Control__ctx_type_11 &_output_){
   Control__ctx_type_11_init(_output_);
   return ;
}

void Control_loop(Control__ctx_type_11 &_ctx){
   _tuple___real_real__ _call_64;
   Control_processMessages(_ctx._inst33,_call_64);
   _ctx.target_left = _call_64.field_0;_ctx.target_right = _call_64.field_1;
   Control_sendControl(32,fix_to_int(fix_abs(_ctx.speed1)));
   Control_sendControl(33,fix_to_int(fix_abs(_ctx.speed2)));
   Control_sendControl(34,fix_to_int(fix_abs(_ctx.speed3)));
   Control_sendControl(35,fix_to_int(fix_abs(_ctx.speed4)));
}

void Control_actuate_init(Control__ctx_type_11 &_output_){
   Control__ctx_type_11_init(_output_);
   return ;
}

void Control_actuate(Control__ctx_type_11 &_ctx){
   _ctx.speed1 = Control_getDisplacement(_ctx.enc1);
   _ctx.speed2 = Control_getDisplacement(_ctx.enc2);
   _ctx.speed3 = Control_getDisplacement(_ctx.enc3);
   _ctx.speed4 = Control_getDisplacement(_ctx.enc4);
   fix16_t action1;
   action1 = Control_control(_ctx._inst35,_ctx.target_left,_ctx.speed1);
   fix16_t action2;
   action2 = Control_control(_ctx._inst36,_ctx.target_right,_ctx.speed2);
   fix16_t action3;
   action3 = Control_control(_ctx._inst37,_ctx.target_left,_ctx.speed3);
   fix16_t action4;
   action4 = Control_control(_ctx._inst38,_ctx.target_right,_ctx.speed4);
   Control_moveMotor(1,action1);
   Control_moveMotor(2,action2);
   Control_moveMotor(3,action3);
   Control_moveMotor(4,action4);
}

void Control_encoder1_init(Control__ctx_type_11 &_output_){
   Control__ctx_type_11_init(_output_);
   return ;
}

void Control_encoder1(Control__ctx_type_11 &_ctx){
   Control_processEncoder(_ctx.enc1,22,24);
}

void Control_encoder2_init(Control__ctx_type_11 &_output_){
   Control__ctx_type_11_init(_output_);
   return ;
}

void Control_encoder2(Control__ctx_type_11 &_ctx){
   Control_processEncoder(_ctx.enc2,26,28);
}

void Control_encoder3_init(Control__ctx_type_11 &_output_){
   Control__ctx_type_11_init(_output_);
   return ;
}

void Control_encoder3(Control__ctx_type_11 &_ctx){
   Control_processEncoder(_ctx.enc3,17,16);
}

void Control_encoder4_init(Control__ctx_type_11 &_output_){
   Control__ctx_type_11_init(_output_);
   return ;
}

void Control_encoder4(Control__ctx_type_11 &_ctx){
   Control_processEncoder(_ctx.enc4,21,20);
}


