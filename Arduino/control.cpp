
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "control.h"

void Control__ctx_type_0_init(Control__ctx_type_0 &_output_){
   Control__ctx_type_0 _ctx;
   _ctx.w1 = 0x0 /* 0.000000 */;
   _output_ = _ctx;
   return ;
}

void Control_filter_init(Control__ctx_type_0 &_output_){
   Control__ctx_type_0_init(_output_);
   return ;
}

fix16_t Control_filter(Control__ctx_type_0 &_ctx, fix16_t x){
   fix16_t k;
   k = 0xb333 /* 0.700000 */;
   fix16_t b0;
   b0 = fix_div(k,fix_add(k,0x10000 /* 1.000000 */));
   fix16_t b1;
   b1 = fix_div(k,fix_add(k,0x10000 /* 1.000000 */));
   fix16_t a1;
   a1 = fix_div(fix_add(k,(-0x10000 /* -1.000000 */)),fix_add(k,0x10000 /* 1.000000 */));
   fix16_t w0;
   w0 = fix_add(x,(- fix_mul(a1,_ctx.w1)));
   fix16_t y0;
   y0 = fix_add(fix_mul(b0,w0),fix_mul(b1,_ctx.w1));
   _ctx.w1 = w0;
   return y0;
}

void Control__ctx_type_1_init(Control__ctx_type_1 &_output_){
   Control__ctx_type_1 _ctx;
   _ctx.i = 0x0 /* 0.000000 */;
   Control__ctx_type_0_init(_ctx._inst2);
   _output_ = _ctx;
   return ;
}

void Control_pi_init(Control__ctx_type_1 &_output_){
   Control__ctx_type_1_init(_output_);
   return ;
}

fix16_t Control_pi(Control__ctx_type_1 &_ctx, fix16_t target, fix16_t current, uint8_t use_filter){
   fix16_t ki;
   ki = 0x41 /* 0.001000 */;
   fix16_t kp;
   kp = 0x30000 /* 3.000000 */;
   fix16_t error;
   error = fix_add(target,(- current));
   fix16_t filtered_error;
   if(use_filter){ filtered_error = Control_filter(_ctx._inst2,error); }
   else
   { filtered_error = error; }
   _ctx.i = fix_add(_ctx.i,fix_mul(ki,filtered_error));
   return fix_add(fix_mul(kp,filtered_error),_ctx.i);
}


